"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[71021],{53330:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/rest-proxy-security-workflow-178d07634974cc1d2e709ce6fe7bab68.png"},84461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(24246),r=n(71670);const s={id:"guides-kafkarestapis-authentication",description:"Create a Markdown Document"},o="Anonymous authentication",a={id:"guides/docs/guides-kafkarestapis-authentication",title:"Anonymous authentication",description:"Create a Markdown Document",source:"@site/docs/guides/docs/guides-kafkarestapis-authentication.mdx",sourceDirName:"guides/docs",slug:"/guides/docs/guides-kafkarestapis-authentication",permalink:"/docs/next/guides/docs/guides-kafkarestapis-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/vulnsystem/vulnsystem.github.io/edit/main/website/docs/guides/docs/guides-kafkarestapis-authentication.mdx",tags:[],version:"current",lastUpdatedBy:"Gitcoins",lastUpdatedAt:1701571630,formattedLastUpdatedAt:"Dec 3, 2023",frontMatter:{id:"guides-kafkarestapis-authentication",description:"Create a Markdown Document"},sidebar:"woofwoof",previous:{title:"Token generation",permalink:"/docs/next/guides/docs/guides-kafkarestapis-tokengen"},next:{title:"Smart authorization",permalink:"/docs/next/guides/docs/guides-kafkarestapis-authorization"}},c={},d=[{value:"Token verification",id:"token-verification",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"anonymous-authentication",children:"Anonymous authentication"}),"\n",(0,i.jsx)("p",{align:"center",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(53330).Z+"",width:"747",height:"333"})})}),"\n",(0,i.jsx)(t.h2,{id:"token-verification",children:"Token verification"}),"\n",(0,i.jsxs)(t.p,{children:["Users can access the system or service without providing any explicit identification credentials like identity card and cell-phone number. Users generate an Ethereum private key to create a ",(0,i.jsx)(t.strong,{children:"token"})," (which is kind of digital signature of a specific message) as authenticity. The proxy that needs to validate the user's authenticity which can verify the token using the user's public key. If the token is valid, it proves that the user possesses the private key corresponding to the public key used for verification."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["To vreify the token, An ",(0,i.jsx)(t.strong,{children:"interceptor or filter"})," implemented to detect and block HTTP requests based on a custom header, you can create a filter that checks the value of the header and decides whether to allow or block the request."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:'title="HeaderFilter.java"',children:'public class HeaderFilter implements Filter {\n\n  private static final Logger log = LoggerFactory.getLogger(HeaderFilter.class);\n\n  @Override\n  public void init(FilterConfig filterConfig) throws ServletException {\n    // TODO Auto-generated method stub\n\t\n  }\n\n  @Override\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n      throws IOException, ServletException {\n    // TODO Auto-generated method stub\n    // Perform your header validation here\n    if (request instanceof HttpServletRequest \n          && isValidHeaders((HttpServletRequest) request)) {\n      chain.doFilter(request, response);\n      return;\n    }\n    // If not valid, block the request (you can customize this part)\n    response.getWriter().write("Invalid custom header value");\n    response.setContentType("text/plain");\n\n    if (response instanceof HttpServletResponse) {\n      log.debug("HeaderFilter: the response is instanceof HttpServletResponse");\n      HttpServletResponse httpResponse = (HttpServletResponse) response;\n      httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }\n\n  @Override\n  public void destroy() {\n    // TODO Auto-generated method stub\n    \n  }\n\n  // Custom method to validate HTTP headers\n  private boolean isValidHeaders(HttpServletRequest request) {\n    // Implement your header validation logic here\n    String token = request.getHeader("oauth-access-token");\n    String expFromHeader = request.getHeader("exp-time");\n    String addressFromHeader = request.getHeader("address");\n\n    if (token == null || expFromHeader == null || addressFromHeader == null) {\n      return false;\n    }\n\n    SignedJWT jwt;\n    JWK publicKey;\n    try {\n      jwt = SignedJWT.parse(token);\n      publicKey = jwt.getHeader().getJWK();\n      if (publicKey == null) {\n        throw new RuntimeException("Token validation failed: Unknown publicKey" + publicKey);\n      }\n\n      if (publicKey instanceof ECKey) {\n        JWSVerifier verifier = new ECDSAVerifier((ECKey) publicKey);\n        verifier.getJCAContext().setProvider(new BouncyCastleProvider());\n        if (!jwt.verify(verifier)) {\n          throw new RuntimeException("Signature check failed: Invalid token signature");\n        }\n      } else {\n        throw new RuntimeException("publicKey is not type of ECKey");\n      }\n\n      JWTClaimsSet claimsSet = jwt.getJWTClaimsSet();\n\n      // Get the expiration time (exp) from the claims set\n      Date expDate = claimsSet.getExpirationTime();  \n      if (expDate == null) {\n        throw new RuntimeException("Token validation failed: Expiry not set");\n      }\n\n      long expFromToken = expDate.getTime();\n      if (System.currentTimeMillis() > expFromToken) {\n        log.debug("expFromToken: " + expFromToken); \n        log.debug("systmCurrent: " + System.currentTimeMillis()); \n        throw new RuntimeException("Token expired time less than system current");\n      }\n\n      if (expFromToken != Long.parseLong(expFromHeader)) {\n        log.debug("expFromToken: " + expFromToken); \n        log.debug("expFromHeade: " + Long.parseLong(expFromHeader)); \n        throw new RuntimeException("Token expired time not equal the exp-time in the http header");\n      }\n\n      String addressFromToken = publicKeyToAddress(publicKey);\n      if (!addressFromToken.equals(addressFromHeader)) {\n        log.debug("addressFromToken: " + addressFromToken); \n        log.debug("addressFromHeade: " + addressFromHeader); \n        throw new RuntimeException("Address from token not equal the address in the http header");\n      }\n\n    } catch (RuntimeException | ParseException | JOSEException e) {\n      log.debug("token verificaiton faliure", e);\n      return false;\n    }\n\n    return true;\n  }\n\n  private  String publicKeyToAddress(JWK publicKey) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    JsonNode jsonNode = null;\n    try {\n      jsonNode = objectMapper.readTree(publicKey.toJSONString());\n    } catch (JsonProcessingException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n\n    Base64URL yBase64 = Base64URL.from(jsonNode.get("y").toString());\n    byte[] yBytes = yBase64.decode();\n\n    String yHexStr = bytesToHex(yBytes);\n    Base64URL xBase64 = Base64URL.from(jsonNode.get("x").toString());\n    byte[] xBytes = xBase64.decode();\n    String xHexStr = bytesToHex(xBytes);\n\n    String publicKeyHexStr = xHexStr + yHexStr;\n    BigInteger publicKeyBig = new BigInteger(publicKeyHexStr, 16);\n\n    return Keys.getAddress(publicKeyBig);\n  }\n\n  // Convert raw bytes to hexadecimal string\n  private static String bytesToHex(byte[] bytes) {\n    StringBuilder hexString = new StringBuilder();\n    for (byte b : bytes) {\n      String hex = String.format("%02x", b);\n      hexString.append(hex);\n    }\n    return hexString.toString();\n  }\n}\n\n'})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["In Kafka REST proxy, The KafkaRestApplication class extends the Application class and provides methods for configuring and starting a Jetty server to host the REST API. You need to register this filter in the KafkaRestApplication. Modify the ",(0,i.jsx)(t.strong,{children:"configurePreResourceHandling"})," method in your Application class to ",(0,i.jsx)(t.strong,{children:"register"})," the filter."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",metastring:'title="KafkaRestApplication.java"',children:'public class KafkaRestApplication extends Application<KafkaRestConfig> {\n\n  List<RestResourceExtension> restResourceExtensions;\n\n  public KafkaRestApplication() {\n    this(new Properties());\n  }\n\n  public KafkaRestApplication(Properties props) {\n    this(new KafkaRestConfig(props));\n  }\n\n  public KafkaRestApplication(KafkaRestConfig config) {\n    this(config, /* path= */ "");\n  }\n\n  public KafkaRestApplication(KafkaRestConfig config, String path) {\n    this(config, path, null);\n  }\n\n  public KafkaRestApplication(KafkaRestConfig config, String path, String listenerName) {\n    super(config, path, listenerName);\n\n    restResourceExtensions =\n        config.getConfiguredInstances(\n            KafkaRestConfig.KAFKA_REST_RESOURCE_EXTENSION_CONFIG, RestResourceExtension.class);\n    config.setMetrics(metrics);\n  }\n\n  @Override\n  public void configurePreResourceHandling(ServletContextHandler context) {\n    // Add the custom header interceptor\n    context.addFilter(new FilterHolder(new HeaderFilter()), "/*", \n        EnumSet.of(DispatcherType.REQUEST));\n  }\n\n  @Override\n  public void configurePostResourceHandling(ServletContextHandler context) {}\n\n  ......\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},71670:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var i=n(27378);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);